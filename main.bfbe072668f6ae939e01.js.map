{"version":3,"sources":["webpack:///./js/1.js","webpack:///./js/2.js","webpack:///./js/3.js","webpack:///./index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","reject","id","logSuccess","promiseSuccess","logError","warn","button1","document","querySelector","button2","button3","addEventListener","then","amount","catch"],"mappings":"2JAIMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,kBAAMD,EAAQF,KAAKA,OAI5BI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,QCPjBG,G,8BAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,KAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIZ,SAAQ,SAAAC,GAIjBA,EAHqBU,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAM7DX,EAAS,SAAAY,GAAY,OAAIV,QAAQW,MAAMD,ICZvCE,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCtB,GAL2BqB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMpD,OAAO,IAAInB,SAAQ,SAACC,EAASuB,GAC3BtB,YAAW,WACUmB,KAAKE,SAAW,GAGjCtB,EAAQ,CAACiB,EAAYO,GAAI3B,IAEzB0B,EAAON,EAAYO,MAEpB3B,OAID4B,EAAa,SAAAC,GACjBtB,QAAQC,IAAR,eACiBqB,EAAe,GADhC,iBACmDA,EAAe,GADlE,OAKIC,EAAW,SAAAH,GACfpB,QAAQwB,KAAR,gCAA6CJ,EAA7C,8BCxBIK,EAAUC,SAASC,cAAc,YACjCC,EAAUF,SAASC,cAAc,YACjCE,EAAUH,SAASC,cAAc,cAEvCF,EAAQK,iBAAiB,SHEH,WACpBrC,EAAM,KAAMsC,KAAKjC,GACjBL,EAAM,KAAMsC,KAAKjC,GACjBL,EAAM,MAAMsC,KAAKjC,MGJnB8B,EAAQE,iBAAiB,SFcH,WACpBzB,EAAgBH,EAAO,SAAS6B,KAAKjC,GACrCO,EAAgBH,EAAO,OAAO6B,KAAKjC,MEfrC+B,EAAQC,iBAAiB,SDyBD,WACtBlB,EAAgB,CAAEQ,GAAI,GAAIY,OAAQ,MAAOD,KAAKV,GAAYY,MAAMV,GAEhEX,EAAgB,CAAEQ,GAAI,GAAIY,OAAQ,MAAOD,KAAKV,GAAYY,MAAMV,GAEhEX,EAAgB,CAAEQ,GAAI,GAAIY,OAAQ,KAAMD,KAAKV,GAAYY,MAAMV,GAE/DX,EAAgB,CAAEQ,GAAI,GAAIY,OAAQ,MAAOD,KAAKV,GAAYY,MAAMV,Q","file":"main.bfbe072668f6ae939e01.js","sourcesContent":["//Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\"\n//через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое\n//передали во время вызова функции delay.\n\nconst delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(ms), ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time} ms`);\n\nconst importWorkOne = () => {\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms\n};\nexport { importWorkOne };\n","//Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback,\n//а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise(resolve => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    resolve(updatedUsers);\n  });\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Должно работать так\n */\n\nconst importWorkTwo = () => {\n  toggleUserState(users, 'Mango').then(logger);\n  toggleUserState(users, 'Lux').then(logger);\n};\n\nexport { importWorkTwo };\n","//Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError,\n// а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve([transaction.id, delay]);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = promiseSuccess => {\n  console.log(\n    `Transaction ${promiseSuccess[0]} processed in ${promiseSuccess[1]}ms`,\n  );\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nconst check = (a, b) => {\n  console.log(b);\n};\n\nconst importWorkThree = () => {\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n};\n\nexport { importWorkThree };\n","import './styles.css';\n\nimport * as one from './js/1';\nimport * as two from './js/2';\nimport * as three from './js/3';\n\nconst button1 = document.querySelector('#workOne');\nconst button2 = document.querySelector('#workTwo');\nconst button3 = document.querySelector('#workThree');\n\nbutton1.addEventListener('click', one.importWorkOne);\nbutton2.addEventListener('click', two.importWorkTwo);\nbutton3.addEventListener('click', three.importWorkThree);\n"],"sourceRoot":""}